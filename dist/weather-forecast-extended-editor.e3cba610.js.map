{"mappings":"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","sources":["src/editor/weather-forecast-extended-editor.ts"],"sourcesContent":["import { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport type { HomeAssistant, LovelaceCardEditor } from \"custom-card-helpers\";\nimport type { HeaderChip, WeatherForecastExtendedConfig } from \"../types\";\n\nconst HEADER_CHIP_INDEXES = [0, 1, 2] as const;\n\ntype HeaderChipFieldName =\n  | `header_chip_${1 | 2 | 3}_type`\n  | `header_chip_${1 | 2 | 3}_attribute`\n  | `header_chip_${1 | 2 | 3}_template`;\n\ntype EditorFormData = WeatherForecastExtendedConfig & Partial<Record<HeaderChipFieldName, string>>;\n\nconst chipTypeFieldName = (index: number): HeaderChipFieldName =>\n  `header_chip_${index + 1}_type` as HeaderChipFieldName;\nconst chipAttributeFieldName = (index: number): HeaderChipFieldName =>\n  `header_chip_${index + 1}_attribute` as HeaderChipFieldName;\nconst chipTemplateFieldName = (index: number): HeaderChipFieldName =>\n  `header_chip_${index + 1}_template` as HeaderChipFieldName;\n\nconst CHIP_FORM_FIELD_NAMES = HEADER_CHIP_INDEXES.reduce<HeaderChipFieldName[]>((names, index) => {\n  names.push(\n    chipTypeFieldName(index),\n    chipAttributeFieldName(index),\n    chipTemplateFieldName(index),\n  );\n  return names;\n}, []);\n\nconst CHIP_TYPE_OPTIONS: Array<{ value: \"attribute\" | \"template\"; label: string }> = [\n  { value: \"attribute\", label: \"Attribute\" },\n  { value: \"template\", label: \"Template\" },\n];\n\ntype HaFormSelector =\n  | { entity: { domain?: string; device_class?: string | string[] } }\n  | { boolean: {} }\n  | { text: {} }\n  | { select: { options: Array<{ value: string; label: string }>; custom_value?: boolean } };\n\ntype HaFormSchema = {\n  name: keyof WeatherForecastExtendedConfig | \"entity\" | HeaderChipFieldName;\n  selector: HaFormSelector;\n  optional?: boolean;\n  disabled?: boolean;\n};\n\ntype ToggleName = \"show_header\" | \"hourly_forecast\" | \"daily_forecast\";\n\nconst fireEvent = (node: HTMLElement, type: string, detail?: unknown) => {\n  node.dispatchEvent(new CustomEvent(type, { detail, bubbles: true, composed: true }));\n};\n\n@customElement(\"weather-forecast-extended-editor\")\nexport class WeatherForecastExtendedEditor extends LitElement implements LovelaceCardEditor {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: WeatherForecastExtendedConfig;\n  @state() private _chipTypes: Record<number, \"attribute\" | \"template\"> = {\n    0: \"attribute\",\n    1: \"attribute\",\n    2: \"attribute\",\n  };\n\n  static styles = css`\n    .editor-section {\n      margin-top: 24px;\n      display: flex;\n      flex-direction: column;\n      gap: 16px;\n    }\n\n    .editor-section:first-of-type {\n      margin-top: 16px;\n    }\n\n    .section-title {\n      margin: 0;\n      font-size: 16px;\n      font-weight: 600;\n    }\n\n    .section-subtitle {\n      margin: 0;\n      font-size: 15px;\n      font-weight: 600;\n    }\n\n    .editor-subsection {\n      display: flex;\n      flex-direction: column;\n      gap: 12px;\n    }\n\n    .chips-section {\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n\n    .chips-hint {\n      margin: 0;\n      font-size: 14px;\n      color: var(--secondary-text-color);\n    }\n\n    .location-description {\n      font-size: 14px;\n      color: var(--secondary-text-color);\n    }\n\n    .sun-coordinates {\n      display: flex;\n      flex-wrap: wrap;\n      gap: 12px;\n    }\n\n    .coordinate-field {\n      display: flex;\n      flex: 1 1 120px;\n      flex-direction: column;\n      gap: 4px;\n      font-size: 14px;\n    }\n\n    .coordinate-field input {\n      font: inherit;\n      padding: 6px 8px;\n      border-radius: 4px;\n      border: 1px solid var(--divider-color, rgba(0, 0, 0, 0.12));\n      background: var(--ha-card-background, #fff);\n      color: var(--primary-text-color);\n    }\n\n    .coordinate-field input:disabled {\n      opacity: 0.6;\n    }\n\n    .forecast-switch {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      gap: 16px;\n    }\n\n    .forecast-switch span {\n      font-size: 14px;\n    }\n  `;\n\n  public setConfig(config: WeatherForecastExtendedConfig): void {\n    const normalizedChips = this._normalizeHeaderChips(config);\n    this._chipTypes = this._buildChipTypeState(normalizedChips);\n\n    this._config = {\n      type: \"custom:weather-forecast-extended-card\",\n      ...config,\n      show_header: config.show_header ?? true,\n      hourly_forecast: config.hourly_forecast ?? true,\n      daily_forecast: config.daily_forecast ?? true,\n      orientation: config.orientation ?? \"vertical\",\n      header_chips: normalizedChips,\n      header_attributes: normalizedChips\n        .filter(chip => chip.type === \"attribute\")\n        .map(chip => chip.attribute),\n    };\n  }\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const { general: generalSchema, layout: layoutSchema, header: headerSchema, chips: chipSchema } =\n      this._buildSchemas();\n    const formData = this._createFormData();\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${formData}\n        .schema=${generalSchema}\n        .computeLabel=${this._computeLabel}\n        @value-changed=${this._handleValueChanged}\n      ></ha-form>\n      <div class=\"editor-section\">\n        <h4 class=\"section-title\">Layout</h4>\n        <ha-form\n          .hass=${this.hass}\n          .data=${formData}\n          .schema=${layoutSchema}\n          .computeLabel=${this._computeLabel}\n          @value-changed=${this._handleValueChanged}\n        ></ha-form>\n      </div>\n      ${this._config.show_header !== false\n        ? html`\n            <div class=\"editor-section\">\n              <h4 class=\"section-title\">Header options</h4>\n              <ha-form\n                .hass=${this.hass}\n                .data=${formData}\n                .schema=${headerSchema}\n                .computeLabel=${this._computeLabel}\n                @value-changed=${this._handleValueChanged}\n              ></ha-form>\n              <div class=\"chips-section\">\n                <h5 class=\"section-subtitle\">Header chips</h5>\n                <p class=\"chips-hint\">Choose Attribute or Template for up to three header chips.</p>\n                <ha-form\n                  .hass=${this.hass}\n                  .data=${formData}\n                  .schema=${chipSchema}\n                  .computeLabel=${this._computeLabel}\n                  @value-changed=${this._handleValueChanged}\n                ></ha-form>\n              </div>\n            </div>\n          `\n        : nothing}\n      <div class=\"editor-section\">\n        <h4 class=\"section-title\">Forecast options</h4>\n        <div class=\"editor-subsection\">\n          <div>\n            <h5 class=\"section-subtitle\">Location</h5>\n            <p class=\"location-description\">\n              Needed for sunrise/sunset markers and day/night backgrounds\n            </p>\n          </div>\n          <div class=\"forecast-switch\">\n            <span>Use Home Assistant location</span>\n            <ha-switch\n              name=\"sun_use_home_coordinates\"\n              .checked=${this._config.sun_use_home_coordinates ?? true}\n              @change=${this._handleSunToggleChange}\n            ></ha-switch>\n          </div>\n          <div class=\"sun-coordinates\">\n            <label class=\"coordinate-field\">\n              <span>Latitude</span>\n              <input\n                type=\"text\"\n                name=\"sun_latitude\"\n                placeholder=\"e.g. 48.137\"\n                .value=${String(this._config.sun_latitude ?? \"\")}\n                ?disabled=${this._config.sun_use_home_coordinates ?? true}\n                @input=${this._handleSunInputChange}\n              />\n            </label>\n            <label class=\"coordinate-field\">\n              <span>Longitude</span>\n              <input\n                type=\"text\"\n                name=\"sun_longitude\"\n                placeholder=\"e.g. 11.575\"\n                .value=${String(this._config.sun_longitude ?? \"\")}\n                ?disabled=${this._config.sun_use_home_coordinates ?? true}\n                @input=${this._handleSunInputChange}\n              />\n            </label>\n          </div>\n        </div>\n        <div class=\"editor-subsection\">\n          <h5 class=\"section-subtitle\">Sunrise & Sunset</h5>\n          <div class=\"forecast-switch\">\n            <span>Show sunrise & sunset</span>\n            <ha-switch\n              name=\"show_sun_times\"\n              .checked=${this._config.show_sun_times ?? false}\n              @change=${this._handleSunToggleChange}\n            ></ha-switch>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private _handleValueChanged(event: CustomEvent<{ value: EditorFormData }>) {\n    event.stopPropagation();\n    const mergedFormValue: EditorFormData = {\n      ...this._createFormData(),\n      ...event.detail.value,\n    };\n\n    const chipTypesUpdate: Record<number, \"attribute\" | \"template\"> = { ...this._chipTypes };\n    HEADER_CHIP_INDEXES.forEach(index => {\n      const typeField = chipTypeFieldName(index);\n      const typeValue = (mergedFormValue[typeField] as \"attribute\" | \"template\" | undefined) ?? \"attribute\";\n      chipTypesUpdate[index] = typeValue === \"template\" ? \"template\" : \"attribute\";\n    });\n    this._chipTypes = chipTypesUpdate;\n\n    const headerChips = this._extractHeaderChips(mergedFormValue);\n\n    const configUpdate: Partial<WeatherForecastExtendedConfig> = {\n      ...mergedFormValue,\n      header_chips: headerChips,\n      header_attributes: headerChips\n        .filter(chip => chip.type === \"attribute\")\n        .map(chip => chip.attribute),\n    };\n\n    CHIP_FORM_FIELD_NAMES.forEach(name => {\n      delete (configUpdate as Record<string, unknown>)[name];\n    });\n\n    this._updateConfig(configUpdate);\n  }\n\n  private _computeLabel = (schema: HaFormSchema) => {\n    if (!this.hass) {\n      return schema.name;\n    }\n\n    switch (schema.name) {\n      case \"entity\":\n        return \"Weather Entity\";\n      case \"header_temperature_entity\":\n        return \"Local header temperature sensor (optional)\";\n      case \"show_header\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.show_header\") || \"Show header\";\n      case \"hourly_forecast\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.weather.show_forecast_hourly\") || \"Show hourly forecast\";\n      case \"daily_forecast\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.weather.show_forecast_daily\") || \"Show daily forecast\";\n      case \"orientation\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.orientation\") || \"Orientation\";\n      case \"use_night_header_backgrounds\":\n        return \"Use separate header backgrounds for nightly conditions\";\n      default:\n        if (typeof schema.name === \"string\" && schema.name.startsWith(\"header_chip_\")) {\n          const parts = schema.name.split(\"_\");\n          const indexStr = parts[2];\n          const index = Number(indexStr);\n          const labelIndex = Number.isFinite(index) && index > 0 ? index : 1;\n          if (schema.name.endsWith(\"_type\")) {\n            return `Header chip ${labelIndex}: mode`;\n          }\n          if (schema.name.endsWith(\"_attribute\")) {\n            return `Header chip ${labelIndex}: attribute`;\n          }\n          if (schema.name.endsWith(\"_template\")) {\n            return `Header chip ${labelIndex}: template`;\n          }\n          return `Header chip ${labelIndex}`;\n        }\n        return schema.name;\n    }\n  };\n\n  private _handleSunToggleChange(event: Event) {\n    const target = event.currentTarget as (HTMLElement & { name?: string; checked?: boolean }) | null;\n    if (!target) {\n      return;\n    }\n    const name = target.getAttribute(\"name\") ?? target.name;\n    if (!name) {\n      return;\n    }\n    const key = name as keyof WeatherForecastExtendedConfig;\n    const isChecked = typeof target.checked === \"boolean\" ? target.checked : false;\n    this._updateConfig({ [key]: isChecked } as Partial<WeatherForecastExtendedConfig>);\n  }\n\n  private _handleSunInputChange(event: Event) {\n    const target = event.currentTarget as HTMLInputElement | null;\n    if (!target) {\n      return;\n    }\n    const key = target.name as keyof WeatherForecastExtendedConfig;\n    const value = target.value.trim();\n    const update: Partial<WeatherForecastExtendedConfig> = {};\n    (update as any)[key] = value === \"\" ? undefined : value;\n    this._updateConfig(update);\n  }\n\n  private _createFormData(): EditorFormData {\n    if (!this._config) {\n      return {} as EditorFormData;\n    }\n\n    const formData: EditorFormData = {\n      ...this._config,\n    };\n\n    const headerChips = this._config.header_chips ?? [];\n\n    HEADER_CHIP_INDEXES.forEach(index => {\n      const typeField = chipTypeFieldName(index);\n      const attributeField = chipAttributeFieldName(index);\n      const templateField = chipTemplateFieldName(index);\n      const configuredChip = headerChips[index];\n      const type = this._chipTypes[index] ?? configuredChip?.type ?? \"attribute\";\n\n      formData[typeField] = type;\n\n      if (type === \"template\") {\n        formData[templateField] = configuredChip?.type === \"template\" ? configuredChip.template : \"\";\n        formData[attributeField] = \"\";\n      } else {\n        formData[attributeField] = configuredChip?.type === \"attribute\" ? configuredChip.attribute : \"\";\n        formData[templateField] = \"\";\n      }\n    });\n\n    return formData;\n  }\n\n  private _extractHeaderChips(formValue: EditorFormData): HeaderChip[] {\n    const chips: HeaderChip[] = [];\n\n    HEADER_CHIP_INDEXES.forEach(index => {\n      const typeField = chipTypeFieldName(index);\n      const attributeField = chipAttributeFieldName(index);\n      const templateField = chipTemplateFieldName(index);\n\n      const type = (formValue[typeField] as \"attribute\" | \"template\" | undefined) ?? \"attribute\";\n\n      if (type === \"template\") {\n        const templateRaw = formValue[templateField];\n        const templateValue = typeof templateRaw === \"string\" ? templateRaw.trim() : \"\";\n        chips.push({ type: \"template\", template: templateValue });\n        return;\n      }\n\n      const attributeRaw = formValue[attributeField];\n      const attributeValue = typeof attributeRaw === \"string\" ? attributeRaw.trim() : \"\";\n      chips.push({ type: \"attribute\", attribute: attributeValue });\n    });\n\n    return chips;\n  }\n\n  private _buildAttributeOptions(): Array<{ value: string; label: string }> {\n    if (!this.hass) {\n      return [{ value: \"\", label: \"None\" }];\n    }\n\n    const entityId = this._config?.entity;\n    if (!entityId) {\n      return [{ value: \"\", label: \"None\" }];\n    }\n\n    const entityState = this.hass.states[entityId];\n    if (!entityState) {\n      return [{ value: \"\", label: \"None\" }];\n    }\n\n    const attributeNames = Object.keys(entityState.attributes ?? {}).sort((a, b) => a.localeCompare(b));\n\n    return [\n      { value: \"\", label: \"None\" },\n      ...attributeNames.map(attribute => ({ value: attribute, label: attribute })),\n    ];\n  }\n\n  private _buildSchemas(): {\n    general: HaFormSchema[];\n    layout: HaFormSchema[];\n    header: HaFormSchema[];\n    chips: HaFormSchema[];\n  } {\n    const generalSchema: HaFormSchema[] = [\n      { name: \"entity\", selector: { entity: { domain: \"weather\" } } },\n      {\n        name: \"header_temperature_entity\",\n        selector: { entity: { domain: \"sensor\", device_class: \"temperature\" } },\n        optional: true,\n      },\n    ];\n\n    const toggleNames: ToggleName[] = [\"show_header\", \"hourly_forecast\", \"daily_forecast\"];\n    const layoutSchema: HaFormSchema[] = toggleNames.map(name => ({ name, selector: { boolean: {} } }));\n\n    const config = this._config;\n    if (config) {\n      const enabledCount = toggleNames.reduce((count, name) =>\n        this._isSectionEnabled(name, config) ? count + 1 : count,\n      0);\n\n      toggleNames.forEach((name, index) => {\n        const isEnabled = this._isSectionEnabled(name, config);\n        layoutSchema[index].disabled = enabledCount <= 1 && isEnabled;\n      });\n    }\n\n    layoutSchema.push({\n      name: \"orientation\",\n      selector: {\n        select: {\n          options: [\n            { value: \"vertical\", label: \"Vertical\" },\n            { value: \"horizontal\", label: \"Horizontal\" },\n          ],\n        },\n      },\n      optional: true,\n    });\n\n    const headerSchema: HaFormSchema[] = [\n      {\n        name: \"use_night_header_backgrounds\",\n        selector: { boolean: {} },\n      },\n    ];\n\n    const attributeOptions = this._buildAttributeOptions();\n    const chipsSchema: HaFormSchema[] = [];\n\n    HEADER_CHIP_INDEXES.forEach(index => {\n      const typeField = chipTypeFieldName(index);\n      chipsSchema.push({\n        name: typeField,\n        selector: {\n          select: {\n            options: CHIP_TYPE_OPTIONS,\n          },\n        },\n        optional: true,\n      });\n\n      const chipType = this._chipTypes[index] ?? \"attribute\";\n      if (chipType === \"template\") {\n        chipsSchema.push({\n          name: chipTemplateFieldName(index),\n          selector: { text: {} },\n          optional: true,\n        });\n      } else {\n        chipsSchema.push({\n          name: chipAttributeFieldName(index),\n          selector: {\n            select: {\n              options: attributeOptions,\n              custom_value: true,\n            },\n          },\n          optional: true,\n          disabled: !this._config?.entity,\n        });\n      }\n    });\n\n    return { general: generalSchema, layout: layoutSchema, header: headerSchema, chips: chipsSchema };\n  }\n\n  private _isSectionEnabled(name: ToggleName, config: WeatherForecastExtendedConfig): boolean {\n    const value = config[name];\n    return value !== false;\n  }\n\n  private _normalizeHeaderChips(config: Partial<WeatherForecastExtendedConfig>): HeaderChip[] {\n    const limit = HEADER_CHIP_INDEXES.length;\n    const normalized: HeaderChip[] = [];\n\n    if (Array.isArray(config.header_chips)) {\n      for (const chip of config.header_chips) {\n        if (normalized.length >= limit || !chip || typeof chip !== \"object\") {\n          continue;\n        }\n\n        if (chip.type === \"attribute\") {\n          const attribute = typeof chip.attribute === \"string\" ? chip.attribute.trim() : \"\";\n          normalized.push({ type: \"attribute\", attribute });\n          continue;\n        }\n\n        if (chip.type === \"template\") {\n          const template = typeof chip.template === \"string\" ? chip.template.trim() : \"\";\n          normalized.push({ type: \"template\", template });\n        }\n      }\n    }\n\n    if (normalized.length) {\n      return normalized.slice(0, limit);\n    }\n\n    const attributeEntries = Array.isArray(config.header_attributes)\n      ? config.header_attributes\n        .filter((attr, index) => index < limit && typeof attr === \"string\")\n        .map(attr => attr.trim())\n        .filter(attr => attr.length > 0)\n      : [];\n\n    return attributeEntries.map(attribute => ({ type: \"attribute\", attribute }));\n  }\n\n  private _buildChipTypeState(chips: HeaderChip[]): Record<number, \"attribute\" | \"template\"> {\n    const types: Record<number, \"attribute\" | \"template\"> = {\n      0: \"attribute\",\n      1: \"attribute\",\n      2: \"attribute\",\n    };\n\n    chips.slice(0, HEADER_CHIP_INDEXES.length).forEach((chip, index) => {\n      if (chip.type === \"template\") {\n        types[index] = \"template\";\n      }\n    });\n\n    return types;\n  }\n\n  private _updateConfig(changes: Partial<WeatherForecastExtendedConfig>) {\n    if (!this._config) {\n      return;\n    }\n\n    const updated: WeatherForecastExtendedConfig = {\n      ...this._config,\n      ...changes,\n      type: \"custom:weather-forecast-extended-card\",\n    };\n\n    const normalizedChips = this._normalizeHeaderChips(updated);\n    updated.header_chips = normalizedChips;\n    updated.header_attributes = normalizedChips\n      .filter(chip => chip.type === \"attribute\")\n      .map(chip => chip.attribute);\n\n    this._config = updated;\n    fireEvent(this, \"config-changed\", { config: updated });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"weather-forecast-extended-editor\": WeatherForecastExtendedEditor;\n  }\n}\n"],"names":[],"version":3,"file":"weather-forecast-extended-editor.e3cba610.js.map"}