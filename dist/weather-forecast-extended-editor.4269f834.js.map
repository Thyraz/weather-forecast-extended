{"mappings":"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","sources":["src/editor/weather-forecast-extended-editor.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators.js\";\nimport type { HomeAssistant, LovelaceCardEditor } from \"custom-card-helpers\";\nimport type { WeatherForecastExtendedConfig } from \"../types\";\n\ntype AttributeFieldName = \"header_attribute_1\" | \"header_attribute_2\" | \"header_attribute_3\";\n\ntype EditorFormData = WeatherForecastExtendedConfig & Partial<Record<AttributeFieldName, string>>;\n\nconst ATTRIBUTE_FIELD_NAMES: AttributeFieldName[] = [\n  \"header_attribute_1\",\n  \"header_attribute_2\",\n  \"header_attribute_3\",\n];\n\ntype HaFormSelector =\n  | { entity: { domain?: string; device_class?: string | string[] } }\n  | { boolean: {} }\n  | { text: {} }\n  | { select: { options: Array<{ value: string; label: string }>; custom_value?: boolean } };\n\ntype HaFormSchema = {\n  name: keyof WeatherForecastExtendedConfig | \"entity\" | \"hourly_forecast\" | \"daily_forecast\" | \"show_header\" | AttributeFieldName;\n  selector: HaFormSelector;\n  optional?: boolean;\n  disabled?: boolean;\n};\n\ntype ToggleName = \"show_header\" | \"hourly_forecast\" | \"daily_forecast\";\n\nconst fireEvent = (node: HTMLElement, type: string, detail?: unknown) => {\n  node.dispatchEvent(new CustomEvent(type, { detail, bubbles: true, composed: true }));\n};\n\n@customElement(\"weather-forecast-extended-editor\")\nexport class WeatherForecastExtendedEditor extends LitElement implements LovelaceCardEditor {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: WeatherForecastExtendedConfig;\n\n  static styles = css`\n    .sun-section,\n    .location-section {\n      margin-top: 16px;\n      display: flex;\n      flex-direction: column;\n      gap: 8px;\n    }\n\n    .sun-section h4,\n    .location-section h4 {\n      margin: 0;\n      font-size: 16px;\n      font-weight: 600;\n    }\n\n    .sun-option {\n      display: flex;\n      align-items: center;\n      gap: 8px;\n      font-size: 14px;\n    }\n\n    .sun-option input[type=\"checkbox\"] {\n      width: 18px;\n      height: 18px;\n    }\n\n    .sun-option span {\n      flex: 1;\n    }\n\n    .sun-coordinates {\n      display: flex;\n      gap: 12px;\n      flex-wrap: wrap;\n    }\n\n    .sun-field {\n      display: flex;\n      flex: 1 1 120px;\n      flex-direction: column;\n      gap: 4px;\n      font-size: 14px;\n    }\n\n    .sun-field input {\n      font: inherit;\n      padding: 6px 8px;\n      border-radius: 4px;\n      border: 1px solid var(--divider-color, rgba(0, 0, 0, 0.12));\n      background: var(--ha-card-background, #fff);\n      color: var(--primary-text-color);\n    }\n\n    .sun-field input:disabled {\n      opacity: 0.6;\n    }\n  `;\n\n  public setConfig(config: WeatherForecastExtendedConfig): void {\n    this._config = {\n      type: \"custom:weather-forecast-extended-card\",\n      ...config,\n      show_header: config.show_header ?? true,\n      hourly_forecast: config.hourly_forecast ?? true,\n      daily_forecast: config.daily_forecast ?? true,\n      orientation: config.orientation ?? \"vertical\",\n    };\n  }\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const schema = this._buildSchema();\n    const formData = this._createFormData();\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${formData}\n        .schema=${schema}\n        .computeLabel=${this._computeLabel}\n        @value-changed=${this._handleValueChanged}\n      ></ha-form>\n      <div class=\"location-section\">\n        <h4>Location</h4>\n        <span>Needed for sunrise/sunset markers and day/night backgrounds</span>\n        <label class=\"sun-option\">\n          <input\n            type=\"checkbox\"\n            name=\"sun_use_home_coordinates\"\n            .checked=${this._config.sun_use_home_coordinates ?? true}\n            @change=${this._handleSunToggleChange}\n          />\n          <span>Use Home Assistant location</span>\n        </label>\n        <div class=\"sun-coordinates\">\n          <label class=\"sun-field\">\n            <span>Latitude</span>\n            <input\n              type=\"text\"\n              name=\"sun_latitude\"\n              placeholder=\"e.g. 48.137\"\n              .value=${String(this._config.sun_latitude ?? \"\")}\n              ?disabled=${this._config.sun_use_home_coordinates ?? true}\n              @input=${this._handleSunInputChange}\n            />\n          </label>\n          <label class=\"sun-field\">\n            <span>Longitude</span>\n            <input\n              type=\"text\"\n              name=\"sun_longitude\"\n              placeholder=\"e.g. 11.575\"\n              .value=${String(this._config.sun_longitude ?? \"\")}\n              ?disabled=${this._config.sun_use_home_coordinates ?? true}\n              @input=${this._handleSunInputChange}\n            />\n          </label>\n        </div>\n      </div>\n      <div class=\"sun-section\">\n        <h4>Sunrise & Sunset</h4>\n        <label class=\"sun-option\">\n          <input\n            type=\"checkbox\"\n            name=\"show_sun_times\"\n            .checked=${this._config.show_sun_times ?? false}\n            @change=${this._handleSunToggleChange}\n          />\n          <span>Show sunrise & sunset</span>\n        </label>\n      </div>\n    `;\n  }\n\n  private _handleValueChanged(event: CustomEvent<{ value: EditorFormData }>) {\n    event.stopPropagation();\n    const formValue = event.detail.value;\n\n    const headerAttributes = this._extractHeaderAttributes(formValue);\n\n    const configUpdate: Partial<WeatherForecastExtendedConfig> = {\n      ...formValue,\n      header_attributes: headerAttributes,\n    };\n\n    ATTRIBUTE_FIELD_NAMES.forEach(name => {\n      delete (configUpdate as Record<string, unknown>)[name];\n    });\n\n    this._updateConfig(configUpdate);\n  }\n\n  private _computeLabel = (schema: HaFormSchema) => {\n    if (!this.hass) {\n      return schema.name;\n    }\n\n    switch (schema.name) {\n      case \"entity\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.entity\");\n      case \"header_temperature_entity\":\n        return \"Local header temperature sensor (optional)\";\n      case \"header_attribute_1\":\n      case \"header_attribute_2\":\n      case \"header_attribute_3\":\n        return \"Header attribute\";\n      case \"show_header\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.show_header\") || \"Show header\";\n      case \"hourly_forecast\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.weather.show_forecast_hourly\") || \"Show hourly forecast\";\n      case \"daily_forecast\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.weather.show_forecast_daily\") || \"Show daily forecast\";\n      case \"orientation\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.orientation\") || \"Orientation\";\n      case \"use_night_header_backgrounds\":\n        return \"Use separate header backgrounds for nightly conditions\";\n      default:\n        return schema.name;\n    }\n  };\n\n  private _handleSunToggleChange(event: Event) {\n    const target = event.currentTarget as HTMLInputElement | null;\n    if (!target) {\n      return;\n    }\n    const key = target.name as keyof WeatherForecastExtendedConfig;\n    this._updateConfig({ [key]: target.checked } as Partial<WeatherForecastExtendedConfig>);\n  }\n\n  private _handleSunInputChange(event: Event) {\n    const target = event.currentTarget as HTMLInputElement | null;\n    if (!target) {\n      return;\n    }\n    const key = target.name as keyof WeatherForecastExtendedConfig;\n    const value = target.value.trim();\n    const update: Partial<WeatherForecastExtendedConfig> = {};\n    (update as any)[key] = value === \"\" ? undefined : value;\n    this._updateConfig(update);\n  }\n\n  private _createFormData(): EditorFormData {\n    if (!this._config) {\n      return {} as EditorFormData;\n    }\n\n    const attributes = this._config.header_attributes ?? [];\n\n    const formData: EditorFormData = {\n      ...this._config,\n      header_attribute_1: attributes[0],\n      header_attribute_2: attributes[1],\n      header_attribute_3: attributes[2],\n    };\n\n    return formData;\n  }\n\n  private _extractHeaderAttributes(formValue: EditorFormData): string[] {\n    return ATTRIBUTE_FIELD_NAMES\n      .map(name => formValue[name])\n      .map(attr => (typeof attr === \"string\" ? attr.trim() : \"\"))\n      .filter(attr => attr.length > 0)\n      .slice(0, 3);\n  }\n\n  private _buildAttributeOptions(): Array<{ value: string; label: string }> {\n    if (!this.hass) {\n      return [{ value: \"\", label: \"None\" }];\n    }\n\n    const entityId = this._config?.entity;\n    if (!entityId) {\n      return [{ value: \"\", label: \"None\" }];\n    }\n\n    const entityState = this.hass.states[entityId];\n    if (!entityState) {\n      return [{ value: \"\", label: \"None\" }];\n    }\n\n    const attributeNames = Object.keys(entityState.attributes ?? {}).sort((a, b) => a.localeCompare(b));\n\n    return [\n      { value: \"\", label: \"None\" },\n      ...attributeNames.map(attribute => ({ value: attribute, label: attribute })),\n    ];\n  }\n\n  private _buildSchema(): HaFormSchema[] {\n    const baseSchema: HaFormSchema[] = [\n      { name: \"entity\", selector: { entity: { domain: \"weather\" } } },\n      {\n        name: \"header_temperature_entity\",\n        selector: { entity: { domain: \"sensor\", device_class: \"temperature\" } },\n        optional: true,\n      },\n    ];\n\n    const attributeOptions = this._buildAttributeOptions();\n    const attributeSchemas: HaFormSchema[] = ATTRIBUTE_FIELD_NAMES.map(name => ({\n      name,\n      selector: {\n        select: {\n          options: attributeOptions,\n          custom_value: true,\n        },\n      },\n      optional: true,\n      disabled: !this._config?.entity,\n    }));\n\n    const toggleNames: ToggleName[] = [\"show_header\", \"hourly_forecast\", \"daily_forecast\"];\n    const toggleSchemas: HaFormSchema[] = toggleNames.map(name => ({ name, selector: { boolean: {} } }));\n\n    const config = this._config;\n    if (config) {\n      const enabledCount = toggleNames.reduce((count, name) =>\n        this._isSectionEnabled(name, config) ? count + 1 : count,\n      0);\n\n      toggleNames.forEach((name, index) => {\n        const isEnabled = this._isSectionEnabled(name, config);\n        toggleSchemas[index].disabled = enabledCount <= 1 && isEnabled;\n      });\n    }\n\n    baseSchema.push(...attributeSchemas);\n    baseSchema.push(...toggleSchemas);\n    baseSchema.push({\n      name: \"orientation\",\n      selector: {\n        select: {\n          options: [\n            { value: \"vertical\", label: \"Vertical\" },\n            { value: \"horizontal\", label: \"Horizontal\" },\n          ],\n        },\n      },\n      optional: true,\n    });\n\n    baseSchema.push({\n      name: \"use_night_header_backgrounds\",\n      selector: { boolean: {} },\n    });\n\n    return baseSchema;\n  }\n\n  private _isSectionEnabled(name: ToggleName, config: WeatherForecastExtendedConfig): boolean {\n    const value = config[name];\n    return value !== false;\n  }\n\n  private _updateConfig(changes: Partial<WeatherForecastExtendedConfig>) {\n    if (!this._config) {\n      return;\n    }\n\n    const updated: WeatherForecastExtendedConfig = {\n      ...this._config,\n      ...changes,\n      type: \"custom:weather-forecast-extended-card\",\n    };\n\n    if (updated.header_attributes) {\n      updated.header_attributes = updated.header_attributes\n        .filter((attr, index) => index < 3 && typeof attr === \"string\")\n        .map(attr => attr.trim())\n        .filter(attr => attr.length > 0);\n    }\n\n    this._config = updated;\n    fireEvent(this, \"config-changed\", { config: updated });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"weather-forecast-extended-editor\": WeatherForecastExtendedEditor;\n  }\n}\n"],"names":[],"version":3,"file":"weather-forecast-extended-editor.4269f834.js.map"}